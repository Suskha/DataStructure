package com.sorting;

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

import com.binaryTree.*;

public class Main {

	private static MergeSort merge = new MergeSort();
	private static QuickSort quick = new QuickSort();
	private static BinaryTree bt = new BinaryTree();
	private static Random rand = new Random();
	private static long startTime;
	private static long endTime;
	private static boolean flag = true;
	private static Scanner input = new Scanner(System.in);

	public static void main(String[] args) {

		int[] a = new int[1000];
		int inputVariable;
		int searchVariable = 0;
		for (int i = 0; i < a.length; i++) {
			a[i] = rand.nextInt(1000);
		}
		int[] b;
		System.out.println("Random Data available");
		while (flag) {
			System.out.println(Arrays.toString(a));
			System.out.println("1 - merge Sort");
			System.out.println("2 - quick Sort");
			System.out.println("3 - Binary Search");
			System.out.println("4 - Perform all");
			System.out.println("0 - quit");
			System.out.print("What you want to perform : ");
			inputVariable = input.nextInt();
			input.nextLine();
			System.out.print("what do you want to serach :");
			searchVariable = input.nextInt();
			input.nextLine();
			switch (inputVariable) {
			case 1:
				System.currentTimeMillis();
				
				int[] mergeSortedArray = new int[1000];
				startTime = System.currentTimeMillis();
				mergeSortedArray = merge.mergeSort(a);
				System.out.println(Arrays.toString(mergeSortedArray));
				System.out.println(quick.find(searchVariable, mergeSortedArray, 0, mergeSortedArray.length));
				endTime = System.currentTimeMillis();
				System.out.printf("Time take to execute the merge sort is : %d ms", endTime - startTime);
				System.out.println();
				break;

			case 2:
				int[] quickSortedArray = new int[1000];
				startTime = System.currentTimeMillis();
				quickSortedArray = quick.quickSort(a, 0, a.length - 1);
				System.out.println(Arrays.toString(quickSortedArray));
				System.out.println(quick.find(searchVariable, quickSortedArray, 0, quickSortedArray.length));
				endTime = System.currentTimeMillis();
				System.out.printf("Time take to execute the quick sort is : %d ms", endTime - startTime);
				System.out.println();
				break;

			case 3:
				startTime = System.currentTimeMillis();
				for (int i = 0; i < a.length; i++) {
					bt.insert(a[i]);
				}
				System.out.print("[");
				bt.inTravese();
				System.out.println(bt.find(searchVariable));
				endTime = System.currentTimeMillis();
				System.out.printf("Time take to execute the Binary Search is : %d ms", endTime - startTime);
				System.out.println();
				break;

			case 4:

				break;

			case 0:
				flag = false;
				break;
			}
		}
	}

}
